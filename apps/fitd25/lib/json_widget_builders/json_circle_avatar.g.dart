// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_circle_avatar.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonCircleAvatarBuilder extends _JsonCircleAvatarBuilder {
  const JsonCircleAvatarBuilder({required super.args});

  static const kType = 'circle_avatar';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonCircleAvatarBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonCircleAvatarBuilder(args: map);

  @override
  JsonCircleAvatarBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonCircleAvatarBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  CircleAvatar buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return CircleAvatar(
      backgroundColor: model.backgroundColor,
      backgroundImage: model.backgroundImage,
      foregroundColor: model.foregroundColor,
      foregroundImage: model.foregroundImage,
      key: key,
      maxRadius: model.maxRadius,
      minRadius: model.minRadius,
      onBackgroundImageError: model.onBackgroundImageError,
      onForegroundImageError: model.onForegroundImageError,
      radius: model.radius,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonCircleAvatar extends JsonWidgetData {
  JsonCircleAvatar({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.backgroundColor,
    this.backgroundImage,
    this.foregroundColor,
    this.foregroundImage,
    this.maxRadius,
    this.minRadius,
    this.onBackgroundImageError,
    this.onForegroundImageError,
    this.radius,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonCircleAvatarBuilderModel.fromDynamic(
           {
             'backgroundColor': backgroundColor,
             'backgroundImage': backgroundImage,
             'foregroundColor': foregroundColor,
             'foregroundImage': foregroundImage,
             'maxRadius': maxRadius,
             'minRadius': minRadius,
             'onBackgroundImageError': onBackgroundImageError,
             'onForegroundImageError': onForegroundImageError,
             'radius': radius,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder: () => JsonCircleAvatarBuilder(
           args: JsonCircleAvatarBuilderModel.fromDynamic(
             {
               'backgroundColor': backgroundColor,
               'backgroundImage': backgroundImage,
               'foregroundColor': foregroundColor,
               'foregroundImage': foregroundImage,
               'maxRadius': maxRadius,
               'minRadius': minRadius,
               'onBackgroundImageError': onBackgroundImageError,
               'onForegroundImageError': onForegroundImageError,
               'radius': radius,
               'child': child,

               ...args,
             },
             args: args,
             registry: registry,
           ),
         ),
         jsonWidgetType: JsonCircleAvatarBuilder.kType,
       );

  /* AUTOGENERATED FROM [CircleAvatar.backgroundColor]*/
  /// The color with which to fill the circle. Changing the background
  /// color will cause the avatar to animate to the new color.
  ///
  /// If a [backgroundColor] is not specified and [ThemeData.useMaterial3] is true,
  /// [ColorScheme.primaryContainer] will be used, otherwise the theme's
  /// [ThemeData.primaryColorLight] is used with dark foreground colors, and
  /// [ThemeData.primaryColorDark] with light foreground colors.
  final Color? backgroundColor;

  /* AUTOGENERATED FROM [CircleAvatar.backgroundImage]*/
  /// The background image of the circle. Changing the background
  /// image will cause the avatar to animate to the new image.
  ///
  /// Typically used as a fallback image for [foregroundImage].
  ///
  /// If the [CircleAvatar] is to have the user's initials, use [child] instead.
  final ImageProvider<Object>? backgroundImage;

  /* AUTOGENERATED FROM [CircleAvatar.foregroundColor]*/
  /// The default text color for text in the circle.
  ///
  /// Defaults to the primary text theme color if no [backgroundColor] is
  /// specified.
  ///
  /// If a [foregroundColor] is not specified and [ThemeData.useMaterial3] is true,
  /// [ColorScheme.onPrimaryContainer] will be used, otherwise the theme's
  /// [ThemeData.primaryColorLight] for dark background colors, and
  /// [ThemeData.primaryColorDark] for light background colors.
  final Color? foregroundColor;

  /* AUTOGENERATED FROM [CircleAvatar.foregroundImage]*/
  /// The foreground image of the circle.
  ///
  /// Typically used as profile image. For fallback use [backgroundImage].
  final ImageProvider<Object>? foregroundImage;

  /* AUTOGENERATED FROM [CircleAvatar.maxRadius]*/
  /// The maximum size of the avatar, expressed as the radius (half the
  /// diameter).
  ///
  /// If [maxRadius] is specified, then [radius] must not also be specified.
  ///
  /// Defaults to [double.infinity].
  ///
  /// Constraint changes are animated, but size changes due to the environment
  /// itself changing are not. For example, changing the [maxRadius] from 10 to
  /// 20 when the [CircleAvatar] is in an unconstrained environment will cause
  /// the avatar to animate from a 20 pixel diameter to a 40 pixel diameter.
  /// However, if the [maxRadius] is 40 and the [CircleAvatar] has a parent
  /// [SizedBox] whose size changes instantaneously from 20 pixels to 40 pixels,
  /// the size will snap to 40 pixels instantly.
  final double? maxRadius;

  /* AUTOGENERATED FROM [CircleAvatar.minRadius]*/
  /// The minimum size of the avatar, expressed as the radius (half the
  /// diameter).
  ///
  /// If [minRadius] is specified, then [radius] must not also be specified.
  ///
  /// Defaults to zero.
  ///
  /// Constraint changes are animated, but size changes due to the environment
  /// itself changing are not. For example, changing the [minRadius] from 10 to
  /// 20 when the [CircleAvatar] is in an unconstrained environment will cause
  /// the avatar to animate from a 20 pixel diameter to a 40 pixel diameter.
  /// However, if the [minRadius] is 40 and the [CircleAvatar] has a parent
  /// [SizedBox] whose size changes instantaneously from 20 pixels to 40 pixels,
  /// the size will snap to 40 pixels instantly.
  final double? minRadius;

  /* AUTOGENERATED FROM [CircleAvatar.onBackgroundImageError]*/
  /// An optional error callback for errors emitted when loading
  /// [backgroundImage].
  final void Function(Object, StackTrace?)? onBackgroundImageError;

  /* AUTOGENERATED FROM [CircleAvatar.onForegroundImageError]*/
  /// An optional error callback for errors emitted when loading
  /// [foregroundImage].
  final void Function(Object, StackTrace?)? onForegroundImageError;

  /* AUTOGENERATED FROM [CircleAvatar.radius]*/
  /// The size of the avatar, expressed as the radius (half the diameter).
  ///
  /// If [radius] is specified, then neither [minRadius] nor [maxRadius] may be
  /// specified. Specifying [radius] is equivalent to specifying a [minRadius]
  /// and [maxRadius], both with the value of [radius].
  ///
  /// If neither [minRadius] nor [maxRadius] are specified, defaults to 20
  /// logical pixels. This is the appropriate size for use with
  /// [ListTile.leading].
  ///
  /// Changes to the [radius] are animated (including changing from an explicit
  /// [radius] to a [minRadius]/[maxRadius] pair or vice versa).
  final double? radius;

  /* AUTOGENERATED FROM [CircleAvatar.child]*/
  /// The widget below this widget in the tree.
  ///
  /// Typically a [Text] widget. If the [CircleAvatar] is to have an image, use
  /// [backgroundImage] instead.
  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [CircleAvatar]*/
/// Creates a circle that represents a user.
class JsonCircleAvatarBuilderModel extends JsonWidgetBuilderModel {
  const JsonCircleAvatarBuilderModel(
    super.args, {
    this.backgroundColor,
    this.backgroundImage,
    this.foregroundColor,
    this.foregroundImage,
    this.maxRadius,
    this.minRadius,
    this.onBackgroundImageError,
    this.onForegroundImageError,
    this.radius,
    this.child,
  });

  /* AUTOGENERATED FROM [CircleAvatar.backgroundColor]*/
  /// The color with which to fill the circle. Changing the background
  /// color will cause the avatar to animate to the new color.
  ///
  /// If a [backgroundColor] is not specified and [ThemeData.useMaterial3] is true,
  /// [ColorScheme.primaryContainer] will be used, otherwise the theme's
  /// [ThemeData.primaryColorLight] is used with dark foreground colors, and
  /// [ThemeData.primaryColorDark] with light foreground colors.
  final Color? backgroundColor;

  /* AUTOGENERATED FROM [CircleAvatar.backgroundImage]*/
  /// The background image of the circle. Changing the background
  /// image will cause the avatar to animate to the new image.
  ///
  /// Typically used as a fallback image for [foregroundImage].
  ///
  /// If the [CircleAvatar] is to have the user's initials, use [child] instead.
  final ImageProvider<Object>? backgroundImage;

  /* AUTOGENERATED FROM [CircleAvatar.foregroundColor]*/
  /// The default text color for text in the circle.
  ///
  /// Defaults to the primary text theme color if no [backgroundColor] is
  /// specified.
  ///
  /// If a [foregroundColor] is not specified and [ThemeData.useMaterial3] is true,
  /// [ColorScheme.onPrimaryContainer] will be used, otherwise the theme's
  /// [ThemeData.primaryColorLight] for dark background colors, and
  /// [ThemeData.primaryColorDark] for light background colors.
  final Color? foregroundColor;

  /* AUTOGENERATED FROM [CircleAvatar.foregroundImage]*/
  /// The foreground image of the circle.
  ///
  /// Typically used as profile image. For fallback use [backgroundImage].
  final ImageProvider<Object>? foregroundImage;

  /* AUTOGENERATED FROM [CircleAvatar.maxRadius]*/
  /// The maximum size of the avatar, expressed as the radius (half the
  /// diameter).
  ///
  /// If [maxRadius] is specified, then [radius] must not also be specified.
  ///
  /// Defaults to [double.infinity].
  ///
  /// Constraint changes are animated, but size changes due to the environment
  /// itself changing are not. For example, changing the [maxRadius] from 10 to
  /// 20 when the [CircleAvatar] is in an unconstrained environment will cause
  /// the avatar to animate from a 20 pixel diameter to a 40 pixel diameter.
  /// However, if the [maxRadius] is 40 and the [CircleAvatar] has a parent
  /// [SizedBox] whose size changes instantaneously from 20 pixels to 40 pixels,
  /// the size will snap to 40 pixels instantly.
  final double? maxRadius;

  /* AUTOGENERATED FROM [CircleAvatar.minRadius]*/
  /// The minimum size of the avatar, expressed as the radius (half the
  /// diameter).
  ///
  /// If [minRadius] is specified, then [radius] must not also be specified.
  ///
  /// Defaults to zero.
  ///
  /// Constraint changes are animated, but size changes due to the environment
  /// itself changing are not. For example, changing the [minRadius] from 10 to
  /// 20 when the [CircleAvatar] is in an unconstrained environment will cause
  /// the avatar to animate from a 20 pixel diameter to a 40 pixel diameter.
  /// However, if the [minRadius] is 40 and the [CircleAvatar] has a parent
  /// [SizedBox] whose size changes instantaneously from 20 pixels to 40 pixels,
  /// the size will snap to 40 pixels instantly.
  final double? minRadius;

  /* AUTOGENERATED FROM [CircleAvatar.onBackgroundImageError]*/
  /// An optional error callback for errors emitted when loading
  /// [backgroundImage].
  final void Function(Object, StackTrace?)? onBackgroundImageError;

  /* AUTOGENERATED FROM [CircleAvatar.onForegroundImageError]*/
  /// An optional error callback for errors emitted when loading
  /// [foregroundImage].
  final void Function(Object, StackTrace?)? onForegroundImageError;

  /* AUTOGENERATED FROM [CircleAvatar.radius]*/
  /// The size of the avatar, expressed as the radius (half the diameter).
  ///
  /// If [radius] is specified, then neither [minRadius] nor [maxRadius] may be
  /// specified. Specifying [radius] is equivalent to specifying a [minRadius]
  /// and [maxRadius], both with the value of [radius].
  ///
  /// If neither [minRadius] nor [maxRadius] are specified, defaults to 20
  /// logical pixels. This is the appropriate size for use with
  /// [ListTile.leading].
  ///
  /// Changes to the [radius] are animated (including changing from an explicit
  /// [radius] to a [minRadius]/[maxRadius] pair or vice versa).
  final double? radius;

  /* AUTOGENERATED FROM [CircleAvatar.child]*/
  /// The widget below this widget in the tree.
  ///
  /// Typically a [Text] widget. If the [CircleAvatar] is to have an image, use
  /// [backgroundImage] instead.
  final JsonWidgetData? child;

  static JsonCircleAvatarBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonCircleAvatarBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonCircleAvatarBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonCircleAvatarBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonCircleAvatarBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonCircleAvatarBuilderModel(
          args,
          backgroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['backgroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          backgroundImage: map['backgroundImage'],
          foregroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['foregroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          foregroundImage: map['foregroundImage'],
          maxRadius: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['maxRadius']);

            return parsed;
          }(),
          minRadius: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['minRadius']);

            return parsed;
          }(),
          onBackgroundImageError: map['onBackgroundImageError'],
          onForegroundImageError: map['onForegroundImageError'],
          radius: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['radius']);

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'backgroundColor': ThemeEncoder.encodeColor(backgroundColor),
      'backgroundImage': backgroundImage,
      'foregroundColor': ThemeEncoder.encodeColor(foregroundColor),
      'foregroundImage': foregroundImage,
      'maxRadius': maxRadius,
      'minRadius': minRadius,
      'onBackgroundImageError': onBackgroundImageError,
      'onForegroundImageError': onForegroundImageError,
      'radius': radius,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class CircleAvatarSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/fitd25/circle_avatar.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'CircleAvatar',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'backgroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'backgroundImage': SchemaHelper.anySchema,
      'foregroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'foregroundImage': SchemaHelper.anySchema,
      'maxRadius': SchemaHelper.numberSchema,
      'minRadius': SchemaHelper.numberSchema,
      'onBackgroundImageError': SchemaHelper.anySchema,
      'onForegroundImageError': SchemaHelper.anySchema,
      'radius': SchemaHelper.numberSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
